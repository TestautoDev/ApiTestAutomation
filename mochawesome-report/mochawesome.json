{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2019-03-07T09:15:06.342Z",
    "end": "2019-03-07T09:15:08.134Z",
    "duration": 1792,
    "testsRegistered": 9,
    "passPercent": 88.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a25b5b7e-7ee8-4bce-b1f0-045bd80b2703",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "8354351d-df69-4a8c-8703-6dbc280f17e2",
        "title": "User",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test.spec.js",
        "file": "\\test\\test.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 82,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"111 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 1\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location1 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"222 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 2\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location2 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"333 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 3\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location3 = res.body;\n                done();\n            });",
            "err": {},
            "isRoot": false,
            "uuid": "b76e6ff3-32d1-47fd-a91e-ed44657e9df9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a 200 response",
            "fullTitle": "User should return a 200 response",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "022368af-b74b-4d6e-9db3-d20ee0583fb8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be an object with keys and values",
            "fullTitle": "User should be an object with keys and values",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property(\"name\");\n        expect(res.body.name).to.not.equal(null);\n        expect(res.body).to.have.property(\"email\");\n        expect(res.body.email).to.not.equal(null);\n        expect(res.body).to.have.property(\"phoneNumber\");\n        expect(res.body.phoneNumber).to.not.equal(null);\n        expect(res.body).to.have.property(\"role\");\n        expect(res.body.role).to.not.equal(null);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a8e71a2-56c5-4194-8198-944585bc7057",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have a 10 digit phone number",
            "fullTitle": "User should have a 10 digit phone number",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.phoneNumber.length).to.equal(10);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ddf5573b-a989-493a-9a45-9af1c2db68bb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have the role of admin",
            "fullTitle": "User should have the role of admin",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.role).to.equal(\"admin\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "878e1f2f-7593-43aa-bf59-18a9d01d2466",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be updated with a new name",
            "fullTitle": "User should be updated with a new name",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.put('/users/1')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        name: \"Kevin\",\n        email: \"kevin@example.com\",\n        phoneNumber: \"9998887777\",\n        role: \"editor\"\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.name).to.equal(\"Kevin\");\n        expect(res.body.email).to.equal(\"kevin@example.com\");\n        expect(res.body.phoneNumber).to.equal(\"9998887777\");\n        expect(res.body.role).to.equal(\"editor\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b532b59e-8dec-4120-a9bb-bcc880b7864d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should access their own locations",
            "fullTitle": "User should access their own locations",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('/users/1/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(200)\n    .end( (err, res) => {\n        expect(res.body.userId).to.equal(1);\n        expect(res.body.addressCity).to.equal(\"Portland\");\n        done();\n    });",
            "err": {
              "message": "AssertionError: expected 2 to equal 1",
              "estack": "AssertionError: expected 2 to equal 1\n    at Test.api.get.set.send.expect.end (test\\test.spec.js:134:44)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\ccviews\\ApiTestAutomation\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.res.on (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at endReadableNT (_stream_readable.js:1103:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
              "diff": "- 2\n+ 1\n"
            },
            "isRoot": false,
            "uuid": "098821b6-2502-4f81-8dc0-477b37a5537d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to access other users locations",
            "fullTitle": "User should not be able to access other users locations",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/2/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(401)\n    .end( (err, res) => {\n        if (err) return done(err);\n        expect(res.error.text).to.equal(\"Unauthorized\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3ed65c5c-7beb-41c1-8511-71fc8704d28d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "022368af-b74b-4d6e-9db3-d20ee0583fb8",
          "6a8e71a2-56c5-4194-8198-944585bc7057",
          "ddf5573b-a989-493a-9a45-9af1c2db68bb",
          "878e1f2f-7593-43aa-bf59-18a9d01d2466",
          "b532b59e-8dec-4120-a9bb-bcc880b7864d",
          "3ed65c5c-7beb-41c1-8511-71fc8704d28d"
        ],
        "failures": [
          "098821b6-2502-4f81-8dc0-477b37a5537d"
        ],
        "pending": [],
        "skipped": [],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "eed167b7-8084-40a1-adf8-1b50afb8b0af",
        "title": "Typi code",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test2.spec.js",
        "file": "\\test\\test2.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have posts",
            "fullTitle": "Typi code should have posts",
            "timedOut": false,
            "duration": 910,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('posts');\n        expect(res.body.posts).to.not.equal(null);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "40182c56-0f2d-4876-8840-063b2435de6d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have comments",
            "fullTitle": "Typi code should have comments",
            "timedOut": false,
            "duration": 692,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('comments');\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "85df771a-12de-4ff4-85ff-98ad2cd977e7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "40182c56-0f2d-4876-8840-063b2435de6d",
          "85df771a-12de-4ff4-85ff-98ad2cd977e7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1602,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}