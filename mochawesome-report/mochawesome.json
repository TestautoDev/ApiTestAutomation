{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 10,
    "pending": 0,
    "failures": 2,
    "start": "2019-04-02T05:19:59.096Z",
    "end": "2019-04-02T05:20:01.034Z",
    "duration": 1938,
    "testsRegistered": 12,
    "passPercent": 83.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "133ec312-039e-4e45-9f90-bc821cde1636",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6e1f4bfb-08f3-4c67-b41a-156676fa3bef",
        "title": "User",
        "fullFile": "c:\\ccviews\\ApiTestAutomation\\test\\test.spec.js",
        "file": "\\test\\test.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 70,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('/locations')\n                .set('Accept', 'application/x-www-form-urlencoded')\n                .send({\n                    addressStreet: \"111 Main St\",\n                    addressCity: \"Portland\",\n                    addressState: \"OR\",\n                    addressZip: \"97209\",\n                    userId: 1\n                })\n                .expect('Content-Type', /json/)\n                .expect(200)\n                .end((err, res) => {\n                    location1 = res.body;\n                });\n            api.post('/locations')\n                .set('Accept', 'application/x-www-form-urlencoded')\n                .send({\n                    addressStreet: \"222 Main St\",\n                    addressCity: \"Portland\",\n                    addressState: \"OR\",\n                    addressZip: \"97209\",\n                    userId: 2\n                })\n                .expect('Content-Type', /json/)\n                .expect(200)\n                .end((err, res) => {\n                    location2 = res.body;\n                });\n            api.post('/locations')\n                .set('Accept', 'application/x-www-form-urlencoded')\n                .send({\n                    addressStreet: \"333 Main St\",\n                    addressCity: \"Portland\",\n                    addressState: \"OR\",\n                    addressZip: \"97209\",\n                    userId: 3\n                })\n                .expect('Content-Type', /json/)\n                .expect(200)\n                .end((err, res) => {\n                    location3 = res.body;\n                    done();\n                });",
            "err": {},
            "isRoot": false,
            "uuid": "1bda857f-9378-4cc2-9635-dc59d9fc019e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a 200 response",
            "fullTitle": "User should return a 200 response",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c0d7d58-df11-4aae-a058-bb4107c54eca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be an object with keys and values",
            "fullTitle": "User should be an object with keys and values",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property(\"name\");\n        expect(res.body.name).to.not.equal(null);\n        expect(res.body).to.have.property(\"email\");\n        expect(res.body.email).to.not.equal(null);\n        expect(res.body).to.have.property(\"phoneNumber\");\n        expect(res.body.phoneNumber).to.not.equal(null);\n        expect(res.body).to.have.property(\"role\");\n        expect(res.body.role).to.not.equal(null);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "45429956-0235-458e-b8ee-b083231a73ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have a 10 digit phone number",
            "fullTitle": "User should have a 10 digit phone number",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.phoneNumber.length).to.equal(10);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a0d757a2-2517-4dd7-b3ac-effb472a271a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have the role of admin",
            "fullTitle": "User should have the role of admin",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.role).to.equal(\"admin\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "056b98de-ed01-4f4a-8f16-29ac6ae2126c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be updated with a new name",
            "fullTitle": "User should be updated with a new name",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.put('/users/1')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        name: \"Kevin\",\n        email: \"kevin@example.com\",\n        phoneNumber: \"9998887777\",\n        role: \"editor\"\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.name).to.equal(\"Kevin\");\n        expect(res.body.email).to.equal(\"kevin@example.com\");\n        expect(res.body.phoneNumber).to.equal(\"9998887777\");\n        expect(res.body.role).to.equal(\"editor\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "77962ef0-07b4-4091-a148-915797cc3b62",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should access their own locations",
            "fullTitle": "User should access their own locations",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('/users/1/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.userId).to.equal(1);\n        expect(res.body.addressCity).to.equal(\"Portland\");\n        done();\n    });",
            "err": {
              "message": "AssertionError: expected 2 to equal 1",
              "estack": "AssertionError: expected 2 to equal 1\n    at Test.api.get.set.send.expect.end (test\\test.spec.js:135:48)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at c:\\ccviews\\ApiTestAutomation\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.res.on (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
              "diff": "- 2\n+ 1\n"
            },
            "isRoot": false,
            "uuid": "c67ecaa6-fac1-46b5-a64c-c030b099c3da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to access other users locations",
            "fullTitle": "User should not be able to access other users locations",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/2/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(401)\n    .end((err, res) => {\n        if (err) return done(err);\n        expect(res.error.text).to.equal(\"Unauthorized\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5df21446-6e0e-4a4a-8e0a-e215da39c727",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8c0d7d58-df11-4aae-a058-bb4107c54eca",
          "45429956-0235-458e-b8ee-b083231a73ee",
          "a0d757a2-2517-4dd7-b3ac-effb472a271a",
          "056b98de-ed01-4f4a-8f16-29ac6ae2126c",
          "77962ef0-07b4-4091-a148-915797cc3b62",
          "5df21446-6e0e-4a4a-8e0a-e215da39c727"
        ],
        "failures": [
          "c67ecaa6-fac1-46b5-a64c-c030b099c3da"
        ],
        "pending": [],
        "skipped": [],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5610da91-8dbb-406e-b023-86e6c954d1e8",
        "title": "Typi code",
        "fullFile": "c:\\ccviews\\ApiTestAutomation\\test\\test2.spec.js",
        "file": "\\test\\test2.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have posts",
            "fullTitle": "Typi code should have posts",
            "timedOut": false,
            "duration": 865,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('posts');\n        expect(res.body.posts).to.not.equal(null);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "8a33ed7a-4887-425d-8490-a74ffe3d1234",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have comments",
            "fullTitle": "Typi code should have comments",
            "timedOut": false,
            "duration": 901,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('comments');\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "584b0656-893e-4123-a94f-779db3ddc622",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8a33ed7a-4887-425d-8490-a74ffe3d1234",
          "584b0656-893e-4123-a94f-779db3ddc622"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1766,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fa83ad1b-5fc5-4173-ac15-8f45abf679ac",
        "title": "Authentication",
        "fullFile": "c:\\ccviews\\ApiTestAutomation\\test\\test3.spec.js",
        "file": "\\test\\test3.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "errors if wrong basic auth",
            "fullTitle": "Authentication errors if wrong basic auth",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/blog')\n    .set('x-api-key', '123myapikey')\n    .auth('incorrect', 'credentials')\n    .expect(401, done)",
            "err": {},
            "isRoot": false,
            "uuid": "ec0ed79f-9d17-4c2c-8689-72019cc37beb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "errors if bad x-api-key header",
            "fullTitle": "Authentication errors if bad x-api-key header",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/blog')\n    .auth('correct', 'credentials')\n    .expect(401)\n    .expect({ error: \"Bad or missing app identification header\" }, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e446c49d-991a-4c58-93a0-cd647fad4abf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ec0ed79f-9d17-4c2c-8689-72019cc37beb",
          "e446c49d-991a-4c58-93a0-cd647fad4abf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4577a61a-8b22-4038-8616-699120966702",
        "title": "/blog",
        "fullFile": "c:\\ccviews\\ApiTestAutomation\\test\\test3.spec.js",
        "file": "\\test\\test3.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "returns blog posts as JSON",
            "fullTitle": "/blog returns blog posts as JSON",
            "timedOut": false,
            "duration": 4,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('/blog')\n    .set('x-api-key', '123myapikey')\n    .auth('correct', 'credentials')\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.property('posts').and.be.instanceof(Array);\n        done();\n    });",
            "err": {
              "message": "Error: expected 200 \"OK\", got 401 \"Unauthorized\"",
              "estack": "Error: expected 200 \"OK\", got 401 \"Unauthorized\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at c:\\ccviews\\ApiTestAutomation\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "8bd330c2-e8c7-4412-878c-96719050ba2d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "8bd330c2-e8c7-4412-878c-96719050ba2d"
        ],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}