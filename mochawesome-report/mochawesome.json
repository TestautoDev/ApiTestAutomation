{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-01T03:14:39.006Z",
    "end": "2019-03-01T03:14:39.225Z",
    "duration": 219,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d9de9e5d-39c6-45c8-8f3d-a83070aac730",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "93917b8e-446e-4040-8a9b-8ca2788458b6",
        "title": "User",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test.spec.js",
        "file": "\\test\\test.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 158,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"111 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 1\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location1 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"222 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 2\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location2 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"333 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 3\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location3 = res.body;\n                done();\n            });",
            "err": {},
            "isRoot": false,
            "uuid": "ae202edd-3c4f-45c5-a36b-96856a734ea0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a 200 response",
            "fullTitle": "User should return a 200 response",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ddac6419-c422-4533-af40-5b0c882668b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be an object with keys and values",
            "fullTitle": "User should be an object with keys and values",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property(\"name\");\n        expect(res.body.name).to.not.equal(null);\n        expect(res.body).to.have.property(\"email\");\n        expect(res.body.email).to.not.equal(null);\n        expect(res.body).to.have.property(\"phoneNumber\");\n        expect(res.body.phoneNumber).to.not.equal(null);\n        expect(res.body).to.have.property(\"role\");\n        expect(res.body.role).to.not.equal(null);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6c99d6a5-0d2a-4d04-9c0b-6fe78321d17d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have a 10 digit phone number",
            "fullTitle": "User should have a 10 digit phone number",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.phoneNumber.length).to.equal(10);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bc681085-2029-4642-9bba-33986183dcae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have the role of admin",
            "fullTitle": "User should have the role of admin",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.role).to.equal(\"admin\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "38117897-1197-4ef8-8fd5-3396d827d88d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be updated with a new name",
            "fullTitle": "User should be updated with a new name",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.put('/users/1')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        name: \"Kevin\",\n        email: \"kevin@example.com\",\n        phoneNumber: \"9998887777\",\n        role: \"editor\"\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.name).to.equal(\"Kevin\");\n        expect(res.body.email).to.equal(\"kevin@example.com\");\n        expect(res.body.phoneNumber).to.equal(\"9998887777\");\n        expect(res.body.role).to.equal(\"editor\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e8a4f445-e8db-4690-89ce-2888956ae1cc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should access their own locations",
            "fullTitle": "User should access their own locations",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(200)\n    .end( (err, res) => {\n        expect(res.body.userId).to.equal(1);\n        expect(res.body.addressCity).to.equal(\"Portland\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b9f159ef-f068-4224-ac84-da4d2f862b19",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to access other users locations",
            "fullTitle": "User should not be able to access other users locations",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/2/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(401)\n    .end( (err, res) => {\n        if (err) return done(err);\n        expect(res.error.text).to.equal(\"Unauthorized\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "59426c4a-cc83-40c3-8b8a-c956897f590a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ddac6419-c422-4533-af40-5b0c882668b0",
          "6c99d6a5-0d2a-4d04-9c0b-6fe78321d17d",
          "bc681085-2029-4642-9bba-33986183dcae",
          "38117897-1197-4ef8-8fd5-3396d827d88d",
          "e8a4f445-e8db-4690-89ce-2888956ae1cc",
          "b9f159ef-f068-4224-ac84-da4d2f862b19",
          "59426c4a-cc83-40c3-8b8a-c956897f590a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 42,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}