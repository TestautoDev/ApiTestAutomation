{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-24T12:23:25.712Z",
    "end": "2019-03-24T12:23:27.900Z",
    "duration": 2188,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "759a4b78-61d7-4de0-901c-9cc7949c4be0",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "addf1a3f-3549-43a5-9a1e-a51767612644",
        "title": "User",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test.spec.js",
        "file": "\\test\\test.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 70,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"111 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 1\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location1 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"222 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 2\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end( (err, res) => {\n                location2 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"333 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 3\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location3 = res.body;\n                done();\n            });",
            "err": {},
            "isRoot": false,
            "uuid": "7a650607-f22b-4c7c-9c40-90cbcc0f9f1e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a 200 response",
            "fullTitle": "User should return a 200 response",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2ac50aa1-f064-4f5b-8843-740e5b299ec1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be an object with keys and values",
            "fullTitle": "User should be an object with keys and values",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property(\"name\");\n        expect(res.body.name).to.not.equal(null);\n        expect(res.body).to.have.property(\"email\");\n        expect(res.body.email).to.not.equal(null);\n        expect(res.body).to.have.property(\"phoneNumber\");\n        expect(res.body.phoneNumber).to.not.equal(null);\n        expect(res.body).to.have.property(\"role\");\n        expect(res.body.role).to.not.equal(null);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11d2b81e-d474-4829-aa04-41456049f67c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have a 10 digit phone number",
            "fullTitle": "User should have a 10 digit phone number",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.phoneNumber.length).to.equal(10);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5aa47f75-4f97-4baa-bb1b-3df0fc6192ca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have the role of admin",
            "fullTitle": "User should have the role of admin",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.role).to.equal(\"admin\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ab9abcd2-5bc0-460e-b812-31a08b7b8a5d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be updated with a new name",
            "fullTitle": "User should be updated with a new name",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.put('/users/1')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        name: \"Kevin\",\n        email: \"kevin@example.com\",\n        phoneNumber: \"9998887777\",\n        role: \"editor\"\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.name).to.equal(\"Kevin\");\n        expect(res.body.email).to.equal(\"kevin@example.com\");\n        expect(res.body.phoneNumber).to.equal(\"9998887777\");\n        expect(res.body.role).to.equal(\"editor\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1bd2b900-6818-4899-9701-c793ca6172cc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should access their own locations",
            "fullTitle": "User should access their own locations",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(200)\n    .end( (err, res) => {\n        expect(res.body.userId).to.equal(1);\n        expect(res.body.addressCity).to.equal(\"Portland\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5a6f2519-dd41-4179-aeb1-d413622a06f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to access other users locations",
            "fullTitle": "User should not be able to access other users locations",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/2/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(401)\n    .end( (err, res) => {\n        if (err) return done(err);\n        expect(res.error.text).to.equal(\"Unauthorized\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "22668bf7-fe38-4550-9b37-b1e4a10e40e0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2ac50aa1-f064-4f5b-8843-740e5b299ec1",
          "11d2b81e-d474-4829-aa04-41456049f67c",
          "5aa47f75-4f97-4baa-bb1b-3df0fc6192ca",
          "ab9abcd2-5bc0-460e-b812-31a08b7b8a5d",
          "1bd2b900-6818-4899-9701-c793ca6172cc",
          "5a6f2519-dd41-4179-aeb1-d413622a06f4",
          "22668bf7-fe38-4550-9b37-b1e4a10e40e0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "012c2553-5e6f-49c1-a105-157da31bc147",
        "title": "Typi code",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test2.spec.js",
        "file": "\\test\\test2.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have posts",
            "fullTitle": "Typi code should have posts",
            "timedOut": false,
            "duration": 1188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('posts');\n        expect(res.body.posts).to.not.equal(null);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "0f31e1b0-61f8-4962-8cb1-bb47db818bbb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have comments",
            "fullTitle": "Typi code should have comments",
            "timedOut": false,
            "duration": 885,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('comments');\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "70c5d725-f0ad-4a7d-8cc6-81f09f7d5370",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0f31e1b0-61f8-4962-8cb1-bb47db818bbb",
          "70c5d725-f0ad-4a7d-8cc6-81f09f7d5370"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2073,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}