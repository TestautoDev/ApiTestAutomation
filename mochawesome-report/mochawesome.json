{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 10,
    "pending": 0,
    "failures": 2,
    "start": "2019-04-02T04:27:07.751Z",
    "end": "2019-04-02T04:27:09.869Z",
    "duration": 2118,
    "testsRegistered": 12,
    "passPercent": 83.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "0abb9496-473d-484c-b7c9-13eaeae41b3e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "591b4855-4f4f-4193-be89-838c74e7ab8b",
        "title": "User",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test.spec.js",
        "file": "\\test\\test.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "User \"before all\" hook",
            "timedOut": false,
            "duration": 54,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"111 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 1\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location1 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"222 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 2\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location2 = res.body;\n            });\n        api.post('/locations')\n            .set('Accept', 'application/x-www-form-urlencoded')\n            .send({\n                addressStreet: \"333 Main St\",\n                addressCity: \"Portland\",\n                addressState: \"OR\",\n                addressZip: \"97209\",\n                userId: 3\n            })\n            .expect('Content-Type', /json/)\n            .expect(200)\n            .end((err, res) => {\n                location3 = res.body;\n                done();\n            });",
            "err": {},
            "isRoot": false,
            "uuid": "0e0a50e9-5a5f-4a89-b05f-cd530c22f2f9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a 200 response",
            "fullTitle": "User should return a 200 response",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "43fb5240-7f7a-438a-8867-e24b549013ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be an object with keys and values",
            "fullTitle": "User should be an object with keys and values",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property(\"name\");\n        expect(res.body.name).to.not.equal(null);\n        expect(res.body).to.have.property(\"email\");\n        expect(res.body.email).to.not.equal(null);\n        expect(res.body).to.have.property(\"phoneNumber\");\n        expect(res.body.phoneNumber).to.not.equal(null);\n        expect(res.body).to.have.property(\"role\");\n        expect(res.body.role).to.not.equal(null);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4456002f-1336-4db7-a9b8-8709903a7e59",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have a 10 digit phone number",
            "fullTitle": "User should have a 10 digit phone number",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.phoneNumber.length).to.equal(10);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ae9a46b7-11b1-4f77-b7c2-c650b83f829f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have the role of admin",
            "fullTitle": "User should have the role of admin",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/1')\n    .set('Accept', 'application/json')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.role).to.equal(\"admin\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6ca18cd2-c150-4a22-89ba-d9cb907fc392",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be updated with a new name",
            "fullTitle": "User should be updated with a new name",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.put('/users/1')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        name: \"Kevin\",\n        email: \"kevin@example.com\",\n        phoneNumber: \"9998887777\",\n        role: \"editor\"\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.name).to.equal(\"Kevin\");\n        expect(res.body.email).to.equal(\"kevin@example.com\");\n        expect(res.body.phoneNumber).to.equal(\"9998887777\");\n        expect(res.body.role).to.equal(\"editor\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "61c0e0a5-7f7d-48ed-87f5-73615768c192",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should access their own locations",
            "fullTitle": "User should access their own locations",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('/users/1/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body.userId).to.equal(1);\n        expect(res.body.addressCity).to.equal(\"Portland\");\n        done();\n    });",
            "err": {
              "message": "AssertionError: expected 2 to equal 1",
              "estack": "AssertionError: expected 2 to equal 1\n    at Test.api.get.set.send.expect.end (test\\test.spec.js:134:44)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\ccviews\\ApiTestAutomation\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.res.on (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
              "diff": "- 2\n+ 1\n"
            },
            "isRoot": false,
            "uuid": "d3d41595-f6d6-4528-aaf4-5f74ff508c08",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to access other users locations",
            "fullTitle": "User should not be able to access other users locations",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/users/2/location')\n    .set('Accept', 'application/x-www-form-urlencoded')\n    .send({\n        userId: 1\n    })\n    .expect(401)\n    .end((err, res) => {\n        if (err) return done(err);\n        expect(res.error.text).to.equal(\"Unauthorized\");\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5bd58469-463a-4560-970f-80fe9ecdbee0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "43fb5240-7f7a-438a-8867-e24b549013ec",
          "4456002f-1336-4db7-a9b8-8709903a7e59",
          "ae9a46b7-11b1-4f77-b7c2-c650b83f829f",
          "6ca18cd2-c150-4a22-89ba-d9cb907fc392",
          "61c0e0a5-7f7d-48ed-87f5-73615768c192",
          "5bd58469-463a-4560-970f-80fe9ecdbee0"
        ],
        "failures": [
          "d3d41595-f6d6-4528-aaf4-5f74ff508c08"
        ],
        "pending": [],
        "skipped": [],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "83931963-9276-4af0-bd25-d251d58a0df0",
        "title": "Typi code",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test2.spec.js",
        "file": "\\test\\test2.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have posts",
            "fullTitle": "Typi code should have posts",
            "timedOut": false,
            "duration": 1049,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('posts');\n        expect(res.body.posts).to.not.equal(null);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "6b6975bf-684b-4f9d-b931-68df46425108",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have comments",
            "fullTitle": "Typi code should have comments",
            "timedOut": false,
            "duration": 932,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/db')\n    .expect(200)\n    .end((err, res) => {\n        expect(res.body).to.have.property('comments');\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9baa5d1-4155-4aa2-8a00-3588d39f4d48",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6b6975bf-684b-4f9d-b931-68df46425108",
          "f9baa5d1-4155-4aa2-8a00-3588d39f4d48"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1981,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6decf333-9eb4-4c6a-91d9-df84921441ed",
        "title": "Authentication",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test3.spec.js",
        "file": "\\test\\test3.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "errors if wrong basic auth",
            "fullTitle": "Authentication errors if wrong basic auth",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/blog')\n    .set('x-api-key', '123myapikey')\n    .auth('incorrect', 'credentials')\n    .expect(401, done)",
            "err": {},
            "isRoot": false,
            "uuid": "37aed541-080b-4666-95e7-9be5b37741f8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "errors if bad x-api-key header",
            "fullTitle": "Authentication errors if bad x-api-key header",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('/blog')\n    .auth('correct', 'credentials')\n    .expect(401)\n    .expect({ error: \"Bad or missing app identification header\" }, done);",
            "err": {},
            "isRoot": false,
            "uuid": "772992f7-cbde-4c91-b2a5-837d4f6c1547",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "37aed541-080b-4666-95e7-9be5b37741f8",
          "772992f7-cbde-4c91-b2a5-837d4f6c1547"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a11eecda-b6af-4f3d-8a19-49ce0434b790",
        "title": "/blog",
        "fullFile": "C:\\ccviews\\ApiTestAutomation\\test\\test3.spec.js",
        "file": "\\test\\test3.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "returns blog posts as JSON",
            "fullTitle": "/blog returns blog posts as JSON",
            "timedOut": false,
            "duration": 5,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('/blog')\n    .set('x-api-key', '123myapikey')\n    .auth('correct', 'credentials')\n    .expect(200)\n    .expect('Content-Type', /json/)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.property('posts').and.be.instanceof(Array);\n        done();\n    });",
            "err": {
              "message": "Error: expected 200 \"OK\", got 401 \"Unauthorized\"",
              "estack": "Error: expected 200 \"OK\", got 401 \"Unauthorized\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\ccviews\\ApiTestAutomation\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "0723bb65-c9ea-42ef-9183-4dabad165e94",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "0723bb65-c9ea-42ef-9183-4dabad165e94"
        ],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}